Resources:
    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: ${self:custom.cognito.PoolName}
            # This flag will protect the resource from being delete from AWS when we run a sls remove, to remove all the resources from this application
            # This is very useful to avoid human mistakes
            DeletionProtection: INACTIVE
            MfaConfiguration: OFF
            AutoVerifiedAttributes:
                - email
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: false
            UsernameAttributes:
                - email
            AccountRecoverySetting:
                RecoveryMechanisms:
                    - Name: verified_email
                      Priority: 1
            Schema:
                - Name: internalId
                  Required: false
                  Mutable: false
                  AttributeDataType: String
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: false
                    RequireNumbers: false
                    RequireSymbols: false
                    RequireUppercase: false
            LambdaConfig:
                PreTokenGenerationConfig:
                    # Serverless framework generates this name automatically for us
                    # But this lambda is defined in the auth.yml
                    # This is gonna work cause serverless framework uses the same cloud formation stack
                    # When defining the lambda ARN using the GetAtt, the serverless will reject the deploy and throw a circular dependency error cause we are using the lambda ARN in the UserPool
                    # LambdaArn: !GetAtt PreTokenGenerationLambdaFunction.Arn
                    # To avoid that we need to define the lambda ARN manually
                    LambdaArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-preTokenGenerationTrigger"
                    LambdaVersion: V2_0
            EmailConfiguration:
                From: ${env:SES_EMAIL_FROM}
                # 2 default values, COGNITO and DEVELOPER. COGNITO is the SES internal instance from aws and DEVELOPER is the one we can set up by ourselves
                EmailSendingAccount: DEVELOPER
                SourceArn: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${env:SES_EMAIL_FROM}"
    PreTokenGenerationLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: PreTokenGenerationTriggerLambdaFunction
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-preTokenGenerationTrigger"
            Principal: cognito-idp.amazonaws.com
            SourceArn: !GetAtt UserPool.Arn
    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: ${self:service}-${self:provider.stage}-UserPoolClient
            UserPoolId: !Ref UserPool
            ExplicitAuthFlows:
                - ALLOW_USER_PASSWORD_AUTH
            GenerateSecret: true
            TokenValidityUnits:
                AccessToken: hours
            AccessTokenValidity: 12
            RefreshTokenRotation:
                Feature: ENABLED
                # Define how much time a refresh token can be used after its generation
                RetryGracePeriodSeconds: 0
